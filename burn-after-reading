#!/usr/bin/env ruby

require 'erb'
require 'yaml'
require 'cgi'
require 'uri'
require 'ostruct'
require 'rqrcode'
require 'base64'

TEMPLATE_PATH = 'page.erb'
LONG_ARG = 2 ** 17
MIN_PX = 400

def gpg_decrypt(path)
  cmd = %w[gpg --decrypt]
  cmd += ENV['BURN_GPG_ARGS'].split if ENV['BURN_GPG_ARGS']
  cmd << path
  IO.popen(cmd) {|gpg| gpg.read }
end

def value_with_qr(value)
  data = qr_data(value)
  qr_code = RQRCode::QRCode.new(data)
  [data, data_uri('image/png', qr_code.as_png(:resize_gte_to => MIN_PX).to_s)]
end

def qr_data(value)
  case value
  when String
    return value
  when Hash
    if value.size == 1
      type, info = value.first
      if %i[totp hotp].include?(type) && info.is_a?(Hash) && info.size == 1
        label, params = info.first
        # Work around a bug in Google Authenticator (other compatible
        # apps do not seem to have any problem with Base32 padding)
        params['secret'].gsub!(/=*$/, '')
        return "otpauth://#{type}/#{CGI.escape(label)}?#{URI.encode_www_form(params)}"
      end
    end
  end
  STDERR.puts "Found an unrecognized #{value.class} value; encoding as a string (#{value})."
  STDERR.puts "Please use a String or single-key Hash as described in the README."
  value.to_s
end

def data_uri(mime_type, data, base64=true)
  "data:#{mime_type}" + (base64 ? ";base64,#{Base64.strict_encode64(data)}" : ",#{data}")
end

def render_page(vars)
  page_template = ERB.new(File.read(TEMPLATE_PATH), nil, '<>')
  vars_binding = OpenStruct.new(vars).instance_eval { binding }
  page_template.result(vars_binding)
end

def open_in_browser(uri)
  # TODO: win32 support (from some cursory research, it looks like just
  # passing a data: URI to `start` will not work)
  if RUBY_PLATFORM =~ /darwin/
    # open(1) doesn't understand data: URIs
    app = ENV.fetch('BURN_MAC_BROWSER', 'Safari')
    system 'osascript', *[%[tell application "#{app}"], %[open location "#{uri.gsub('"', '\"')}"], 'activate', 'end tell'].flat_map {|s| ['-e', s] }
  else
    cmd = ENV.fetch('BROWSER', 'xdg-open')
    system cmd, uri
  end
end

ARGV.each do |path|
  begin
    secrets = YAML.load(gpg_decrypt(path))
  rescue => err
    STDERR.puts "Error loading gpg output as YAML: #{err}"
    exit 1
  end

  html = render_page(:secrets => secrets.map {|k, v| [k, *value_with_qr(v)] })
  uri = data_uri('text/html', html.gsub("\n", ''), false)
  if uri.size > LONG_ARG
    STDERR.puts "Warning: HTML data is large (#{uri.size} bytes). If you get an error"
    STDERR.puts "opening it due to OS limitations, try creating several smaller files."
  end
  open_in_browser(uri)
end
