#!/usr/bin/env ruby

require 'erb'
require 'yaml'
require 'ostruct'
require 'rqrcode'

TEMPLATE_PATH = 'page.erb'

def gpg_decrypt(path)
  cmd = %w[gpg --decrypt]
  cmd += ENV['BURN_GPG_ARGS'].split if ENV['BURN_GPG_ARGS']
  cmd << path
  IO.popen(cmd) {|gpg| gpg.read }
end

def qr_data(value)
  case value
  when String
    return value
  when Hash
    if value.size == 1
      type, info = value.first
      if %i[totp hotp].include?(type) && info.is_a?(Hash) && info.size == 1
        label, params = info.first
        return "otpauth://#{type}/#{label}?#{URI.encode_www_form(params)}"
      end
    end
  end
  STDERR.puts "Found an unrecognized #{value.class} value; encoding as a string (#{value})."
  STDERR.puts "Please use a String or single-key Hash as described in the README."
  value.to_s
end

def qr_code(value)
  RQRCode::QRCode.new(qr_data(value), :level => :h)
end

def render_page(output_path, vars)
  page_template = ERB.new(File.read(TEMPLATE_PATH), nil, '<>')
  vars_binding = OpenStruct.new(vars).instance_eval { binding }
  File.open(output_path, 'w') do |f|
    f.write page_template.result(vars_binding)
  end
end

ARGV.each do |path|
  begin
    data = YAML.load(gpg_decrypt(path))
  rescue => err
    STDERR.puts "Error loading gpg output as YAML: #{err}"
    exit 1
  end

  output_path = path.sub(/\.yml\.gpg$/, '') + '.html'
  secrets = data.map {|k, v| d = qr_data(v); [k, d, qr_code(d)] }
  render_page(output_path, :secrets => secrets)
end
